import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { 
  Settings, 
  Eye, 
  Code, 
  Palette, 
  Zap, 
  MessageSquare, 
  FileText, 
  Wrench,
  Save,
  RotateCcw,
  CheckCircle,
  AlertCircle,
  X,
  Loader2
} from 'lucide-react';

interface ResponseFormatConfig {
  response_style: 'concise' | 'conversational' | 'detailed' | 'technical';
  show_thinking: boolean;
  show_tool_details: boolean;
  include_examples: boolean;
  include_citations: boolean;
  include_warnings: boolean;
  custom_format?: string;
  custom_prefix?: string;
  custom_suffix?: string;
}

interface ResponseFormatEditorProps {
  agentId: string;
  currentConfig: ResponseFormatConfig;
  onConfigChange: (config: ResponseFormatConfig) => void;
  onSave: (config: ResponseFormatConfig) => Promise<void>;
  isVisible: boolean;
  onClose: () => void;
}

const ResponseFormatEditor: React.FC<ResponseFormatEditorProps> = ({
  agentId,
  currentConfig,
  onConfigChange,
  onSave,
  isVisible,
  onClose
}) => {
  const [config, setConfig] = useState<ResponseFormatConfig>(currentConfig);
  const [previewText, setPreviewText] = useState("What is the capital of France?");
  const [previewOutput, setPreviewOutput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);

  useEffect(() => {
    setConfig(currentConfig);
    setHasChanges(false);
  }, [currentConfig]);

  useEffect(() => {
    generatePreview();
  }, [config, previewText]);

  const handleConfigChange = (key: keyof ResponseFormatConfig, value: any) => {
    const newConfig = { ...config, [key]: value };
    setConfig(newConfig);
    setHasChanges(true);
    onConfigChange(newConfig);
  };

  const generatePreview = () => {
    let output = "";
    
    // Add thinking process if enabled
    if (config.show_thinking) {
      output += "<think>\nI need to answer this question accurately. The capital of France is Paris.\n</think>\n\n";
    }
    
    // Add tool execution if enabled
    if (config.show_tool_details) {
      output += "**Tool Execution:**\n1. Knowledge lookup completed\n\n";
    }
    
    // Add main response based on style
    switch (config.response_style) {
      case 'concise':
        output += "**Answer:** Paris";
        break;
      case 'conversational':
        output += "Hi! The capital of France is Paris!";
        break;
      case 'detailed':
        output += "**Detailed Analysis:**\nParis is the capital and largest city of France, located in the north-central part of the country. It has been the capital since the 6th century and is known for its rich history, culture, and landmarks like the Eiffel Tower.";
        break;
      case 'technical':
        output += "**Technical Response:**\nParis (48.8566°N, 2.3522°E) serves as the administrative capital of the French Republic, with a population of approximately 2.1 million within city limits.";
        break;
    }
    
    // Add examples if enabled
    if (config.include_examples && ['detailed', 'technical'].includes(config.response_style)) {
      output += "\n\n**Example:**\nOther major French cities include Lyon, Marseille, and Toulouse.";
    }
    
    // Add citations if enabled
    if (config.include_citations) {
      output += "\n\n**Sources:**\nBased on data from: geography database, official records";
    }
    
    // Add warnings if enabled
    if (config.include_warnings) {
      output += "\n\n⚠️ **Note:** This response is generated by an AI assistant. Please verify important information independently.";
    }
    
    // Apply custom formatting if provided
    if (config.custom_format) {
      output = config.custom_format.replace('{content}', output);
    }
    
    // Add custom prefix/suffix
    if (config.custom_prefix) {
      output = config.custom_prefix + "\n\n" + output;
    }
    
    if (config.custom_suffix) {
      output = output + "\n\n" + config.custom_suffix;
    }
    
    setPreviewOutput(output);
  };

  const handleSave = async () => {
    setIsLoading(true);
    try {
      await onSave(config);
      setHasChanges(false);
    } catch (error) {
      console.error('Error saving config:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleReset = () => {
    setConfig(currentConfig);
    setHasChanges(false);
  };

  if (!isVisible) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <Card className="w-[90vw] max-w-6xl h-[90vh] overflow-hidden">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Response Format Editor
          </CardTitle>
          <Button variant="ghost" size="sm" onClick={onClose}>
            <X className="h-4 w-4" />
          </Button>
        </CardHeader>
        
        <CardContent className="h-full overflow-hidden">
          <Tabs defaultValue="style" className="h-full">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="style" className="flex items-center gap-2">
                <Palette className="h-4 w-4" />
                Style
              </TabsTrigger>
              <TabsTrigger value="content" className="flex items-center gap-2">
                <FileText className="h-4 w-4" />
                Content
              </TabsTrigger>
              <TabsTrigger value="custom" className="flex items-center gap-2">
                <Code className="h-4 w-4" />
                Custom
              </TabsTrigger>
              <TabsTrigger value="preview" className="flex items-center gap-2">
                <Eye className="h-4 w-4" />
                Preview
              </TabsTrigger>
            </TabsList>

            <div className="h-full overflow-y-auto mt-4">
              <TabsContent value="style" className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold">Response Style</h3>
                    <div className="grid grid-cols-2 gap-3">
                      {[
                        { id: 'concise', label: 'Concise', icon: Zap, desc: 'Brief, direct answers' },
                        { id: 'conversational', label: 'Conversational', icon: MessageSquare, desc: 'Natural, friendly tone' },
                        { id: 'detailed', label: 'Detailed', icon: FileText, desc: 'Comprehensive explanations' },
                        { id: 'technical', label: 'Technical', icon: Wrench, desc: 'Precise, professional language' }
                      ].map((style) => (
                        <Card 
                          key={style.id}
                          className={`cursor-pointer transition-all ${
                            config.response_style === style.id 
                              ? 'ring-2 ring-blue-500 bg-blue-50 dark:bg-blue-950' 
                              : 'hover:bg-gray-50 dark:hover:bg-gray-800'
                          }`}
                          onClick={() => handleConfigChange('response_style', style.id)}
                        >
                          <CardContent className="p-4">
                            <div className="flex items-center gap-3">
                              <style.icon className="h-5 w-5" />
                              <div>
                                <div className="font-medium">{style.label}</div>
                                <div className="text-sm text-gray-500">{style.desc}</div>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>

                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold">Quick Settings</h3>
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <Label htmlFor="show_thinking">Show Thinking Process</Label>
                        <Switch
                          id="show_thinking"
                          checked={config.show_thinking}
                          onCheckedChange={(checked) => handleConfigChange('show_thinking', checked)}
                        />
                      </div>
                      <div className="flex items-center justify-between">
                        <Label htmlFor="show_tool_details">Show Tool Execution Details</Label>
                        <Switch
                          id="show_tool_details"
                          checked={config.show_tool_details}
                          onCheckedChange={(checked) => handleConfigChange('show_tool_details', checked)}
                        />
                      </div>
                      <div className="flex items-center justify-between">
                        <Label htmlFor="include_examples">Include Examples</Label>
                        <Switch
                          id="include_examples"
                          checked={config.include_examples}
                          onCheckedChange={(checked) => handleConfigChange('include_examples', checked)}
                        />
                      </div>
                      <div className="flex items-center justify-between">
                        <Label htmlFor="include_citations">Include Source Citations</Label>
                        <Switch
                          id="include_citations"
                          checked={config.include_citations}
                          onCheckedChange={(checked) => handleConfigChange('include_citations', checked)}
                        />
                      </div>
                      <div className="flex items-center justify-between">
                        <Label htmlFor="include_warnings">Include Safety Warnings</Label>
                        <Switch
                          id="include_warnings"
                          checked={config.include_warnings}
                          onCheckedChange={(checked) => handleConfigChange('include_warnings', checked)}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="content" className="space-y-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">Content Customization</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="custom_prefix">Custom Prefix</Label>
                        <Textarea
                          id="custom_prefix"
                          placeholder="Text to add before the main response..."
                          value={config.custom_prefix || ''}
                          onChange={(e) => handleConfigChange('custom_prefix', e.target.value)}
                          rows={3}
                        />
                      </div>
                      <div>
                        <Label htmlFor="custom_suffix">Custom Suffix</Label>
                        <Textarea
                          id="custom_suffix"
                          placeholder="Text to add after the main response..."
                          value={config.custom_suffix || ''}
                          onChange={(e) => handleConfigChange('custom_suffix', e.target.value)}
                          rows={3}
                        />
                      </div>
                    </div>
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="preview_input">Preview Input</Label>
                        <Input
                          id="preview_input"
                          value={previewText}
                          onChange={(e) => setPreviewText(e.target.value)}
                          placeholder="Enter a question to preview the format..."
                        />
                      </div>
                      <div className="text-sm text-gray-500">
                        <p>Use <code className="bg-gray-100 px-1 rounded">{'{content}'}</code> in custom format to insert the main response.</p>
                      </div>
                    </div>
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="custom" className="space-y-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">Custom Format Template</h3>
                  <div>
                    <Label htmlFor="custom_format">Custom Format Template</Label>
                    <Textarea
                      id="custom_format"
                      placeholder="Custom format template. Use {content} to insert the main response..."
                      value={config.custom_format || ''}
                      onChange={(e) => handleConfigChange('custom_format', e.target.value)}
                      rows={8}
                      className="font-mono text-sm"
                    />
                    <div className="text-sm text-gray-500 mt-2">
                      <p><strong>Available variables:</strong></p>
                      <ul className="list-disc list-inside space-y-1">
                        <li><code>{'{content}'}</code> - Main response content</li>
                        <li><code>{'{thinking}'}</code> - Thinking process (if enabled)</li>
                        <li><code>{'{tools}'}</code> - Tool execution details (if enabled)</li>
                        <li><code>{'{examples}'}</code> - Examples section (if enabled)</li>
                        <li><code>{'{citations}'}</code> - Source citations (if enabled)</li>
                        <li><code>{'{warnings}'}</code> - Safety warnings (if enabled)</li>
                      </ul>
                    </div>
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="preview" className="space-y-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">Response Preview</h3>
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div>
                      <Label>Input Query</Label>
                      <Card className="p-4">
                        <div className="font-mono text-sm">{previewText}</div>
                      </Card>
                    </div>
                    <div>
                      <Label>Formatted Output</Label>
                      <Card className="p-4">
                        <div className="whitespace-pre-wrap text-sm font-mono max-h-96 overflow-y-auto">
                          {previewOutput || "Preview will appear here..."}
                        </div>
                      </Card>
                    </div>
                  </div>
                </div>
              </TabsContent>
            </div>
          </Tabs>

          <div className="flex items-center justify-between pt-4 border-t mt-6">
            <div className="flex items-center gap-2">
              {hasChanges && (
                <Badge variant="outline" className="text-orange-600">
                  <AlertCircle className="h-3 w-3 mr-1" />
                  Unsaved changes
                </Badge>
              )}
              <Button variant="outline" onClick={handleReset} disabled={!hasChanges}>
                <RotateCcw className="h-4 w-4 mr-2" />
                Reset
              </Button>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" onClick={onClose}>
                Cancel
              </Button>
              <Button onClick={handleSave} disabled={!hasChanges || isLoading}>
                {isLoading ? (
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <Save className="h-4 w-4 mr-2" />
                )}
                Save Changes
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ResponseFormatEditor;
